{"version":3,"sources":["webpack:///./src/constant/index.js","webpack:///./node_modules/core-js/modules/es.array.find-index.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///./node_modules/@babel/runtime/helpers/esm/toArray.js","webpack:///./src/utils/index.js"],"names":["listMonth","listDay","$","$findIndex","findIndex","addToUnscopables","arrayMethodUsesToLength","FIND_INDEX","SKIPS_HOLES","USES_TO_LENGTH","Array","target","proto","forced","callbackfn","this","arguments","length","undefined","_arrayWithHoles","arr","isArray","_nonIterableRest","TypeError","_toArray","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","require","ALL_LOGS","QUERY_BOOKS","QUERY_PAGE_BOOKS","QUERY_AUTHORS","QUERY_GENRES","QUERY_BOOK","QUERY_AUTHOR","NUMBER_OF_BOOK","AMOUNT_VISITOR","QUERY_PAGE_AUTHOR","VERIFY_ADMIN","VERIFY_USER","UPDATE_EMAIL","ADD_VISITOR","UPDATE_BOOK","DELETE_BOOK","ADD_AUTHOR","UPDATE_AUTHOR","DELETE_AUTHOR","ADD_GENRE","DELETE_GENRE","UPDATE_ADMIN","ADD_BOOK","apolloClient","handleError","error","errorName","toString","split","success","message","getAllLogs","query","data","allLogs","Error","updateNewEmail","user","mutate","mutation","variables","console","log","addBook","name","genre","description","author_id","photo","user_add","bookVar","getBook","bookId","id","book","getAllBooks","limit","books","getPageBooks","page","filter","key","author","booksPage","getAddBook","manyBooks","addVisitor","getAmountVisitor","manyVisitor","setDate","dateDB","d","Date","mnthIndex","getMonth","newDate","getDate","getFullYear","getAllGenre","genres","updateBook","form","imgDefault","update","cache","readQuery","index","_id","writeQuery","deletedBook","splice","i","currentPage","nextBooks","nextPageInfo","pageInfo","firstBook","anotherBooks","push","__typename","result","getAuthorPage","authorsPage","getAuthor","getAllAuthor","authors","addAuthor","age","parseInt","unshift","currentAuthors","nextAuthors","nextPage","lastAuthor","pop","msg","updateAuthor","deleteAuthor","delIndex","e","firstAuthor","anotherAuthors","verifyAdmin","password","verifyToken","token","verifyUser","email","store","dispatch","errSplit","updateAdmin","pwd","avatar","username","commit","addGenre","deleteGenre","genreId"],"mappings":"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","file":"js/chunk-143885df.f7576e11.js","sourcesContent":["export const listMonth = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sept',\n    'Okt',\n    'Nov',\n    'Des'\n]\n\nexport const listDay = [\n    'Sun',\n    'Mon',\n    'Tues',\n    'Wed',\n    'Thur',\n    'Fri',\n    \"Sat\",\n]","'use strict';\nvar $ = require('../internals/export');\nvar $findIndex = require('../internals/array-iteration').findIndex;\nvar addToUnscopables = require('../internals/add-to-unscopables');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar FIND_INDEX = 'findIndex';\nvar SKIPS_HOLES = true;\n\nvar USES_TO_LENGTH = arrayMethodUsesToLength(FIND_INDEX);\n\n// Shouldn't skip holes\nif (FIND_INDEX in []) Array(1)[FIND_INDEX](function () { SKIPS_HOLES = false; });\n\n// `Array.prototype.findIndex` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.findindex\n$({ target: 'Array', proto: true, forced: SKIPS_HOLES || !USES_TO_LENGTH }, {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables(FIND_INDEX);\n","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","\nconst {\n    ALL_LOGS, \n    QUERY_BOOKS, \n    QUERY_PAGE_BOOKS,\n    QUERY_AUTHORS, \n    QUERY_GENRES, \n    QUERY_BOOK, \n    QUERY_AUTHOR,\n    NUMBER_OF_BOOK, \n    AMOUNT_VISITOR,\n    QUERY_PAGE_AUTHOR,\n    VERIFY_ADMIN,\n    VERIFY_USER \n} = require('../graphql/query');\n\nconst { listMonth } = require('@/constant/index');\n\nconst { UPDATE_EMAIL, \n    ADD_VISITOR,\n    UPDATE_BOOK,  \n    DELETE_BOOK,\n    ADD_AUTHOR,\n    UPDATE_AUTHOR,\n    DELETE_AUTHOR,\n    ADD_GENRE,\n    DELETE_GENRE,\n    UPDATE_ADMIN,\n    ADD_BOOK,\n} = require('../graphql/mutations');\n\nconst  {\n    apolloClient\n} = require('../vue-apollo');\n\nimport store from \"../store/index\";\n\n\n\n\n\nexport const handleError = (error) => {\n    const errorName = error.toString().split(\":\")[2];\n    return {\n        error : true,\n        success : false,\n        message : errorName,\n    }\n}\n\n\n\nexport const getAllLogs = async () => {\n    try {   \n        const data = await apolloClient.query({\n            query : ALL_LOGS,\n        });\n        const { data : { allLogs }} = data\n        return allLogs;\n    } catch(err) {\n        new Error(err);\n    }\n};\n\n\nexport const updateNewEmail = async (user) => {\n    try {\n        const data = await apolloClient.mutate({\n            mutation : UPDATE_EMAIL,\n            variables : user\n        });\n        console.log(data);\n    } catch(err) {\n        console.log(err)\n        throw new Error(err);\n    }\n}\n\n\nexport const addBook = async ({\n    name,\n    genre,\n    description,\n    author_id,\n    photo,\n    user_add\n}) => {\n    const bookVar =  {\n        name,\n        genre,\n        description,\n        author_id,\n        photo,\n        user_add\n    }\n    console.log(bookVar);\n    try {\n        const data = await apolloClient.mutate({\n            mutation : ADD_BOOK,\n            variables : bookVar,\n        });\n        console.log(data);\n        return data;\n    } catch(err) {\n        console.log(err);\n    }\n}\n\n\nexport const getBook = async (bookId) => {\n    try {\n        const { data : { book }} = await apolloClient.query({\n            query : QUERY_BOOK,\n            variables : {\n                id : bookId\n            }\n        });\n        return book;    \n    } catch(err) {\n        console.log(err);\n        throw new Error(err);\n    }\n}\n\nexport const getAllBooks = async () => {\n    try {\n        const { data : { books } } = await apolloClient.query({\n            query : QUERY_BOOKS,\n            variables : {\n                limit : 5,\n            },\n        })\n        return books;\n    } catch(error) {\n        new Error(error);\n    }\n}\n\nexport const getPageBooks = async (\n    limit,\n    page,\n    filter,\n    ) => {\n    const {\n        key,\n        author,\n        genre,\n    } = filter;\n    try {\n        const { data : { booksPage }} = await apolloClient.query({\n            query : QUERY_PAGE_BOOKS,\n            variables : {\n                limit,\n                page,\n                key,\n                author,\n                genre,\n            }\n        });\n        return booksPage;\n    } catch(err) {\n        console.log(err);\n    }\n}\n\nexport const getAddBook = async () => {\n    try {\n        const { data : { manyBooks }} = await apolloClient.query({\n            query : NUMBER_OF_BOOK\n        });\n        return manyBooks;\n    } catch(err) {\n        new Error(err);\n    }\n}\n\nexport const addVisitor = async () => {\n    try {\n        await apolloClient.mutate({\n            mutation : ADD_VISITOR,\n        })\n        return;\n    }catch(err) {\n        console.log(err);\n    }\n}\n\nexport const getAmountVisitor = async () =>  {\n    try {\n        const { data  : { manyVisitor }} = await apolloClient.query({\n            query: AMOUNT_VISITOR,\n        });\n        return manyVisitor;\n    }catch(err) {\n        console.log(err);\n    }\n}\n\nexport const setDate = (dateDB) => {\n    const d = new Date(dateDB);\n    const mnthIndex = d.getMonth();\n    const newDate = `${d.getDate()}-${listMonth[mnthIndex]}-${d.getFullYear()}`;\n    return newDate;\n}\n\nexport const getAllGenre = async () => {\n    try {\n        const { data : { genres } } = await apolloClient.query({\n            query : QUERY_GENRES\n        });\n        return genres\n    }catch(err) {\n        console.log(err);\n        console.log('Error saat mengambil genre');\n    }\n}\n\nexport const updateBook = async (form,page,limit,{\n    author,\n    genre,\n    key\n}) => {\n    if(!form.photo || form.photo == \"\") {\n        try {\n            const data =  await apolloClient.mutate({\n               mutation : UPDATE_BOOK,\n               variables : {\n                   name : form.name,\n                   bookId : form.bookId,\n                   genre : form.genre,\n                   description : form.description,\n                   author_id : form.author_id,\n                   imgDefault : form.imgDefault,\n               },\n               update: async (cache, { data : { updateBook } }) => {\n                    const data = cache.readQuery({\n                        query : QUERY_PAGE_BOOKS,\n                        variables : {\n                            page,\n                            limit,\n                            author,\n                            key,\n                            genre,\n                        }\n                    });\n                    const index = data.booksPage.books.findIndex(book => book._id == form.bookId);\n                    data.booksPage.books[index] = {...updateBook, _id : form.bookId };\n                    console.log(`${updateBook.name} was updated`);\n                    cache.writeQuery({\n                        query : QUERY_PAGE_BOOKS,\n                        variables : {\n                            limit,\n                            page,\n                            author,\n                            genre,\n                            key,\n                        },\n                        data : data\n                    });\n                    return data;\n               }\n            });\n            return data;\n        } catch(err) {\n            console.log(err);\n        }\n    } else {\n        try {\n            const data =  await apolloClient.mutate({\n                mutation : UPDATE_BOOK,\n                variables : {\n                   name : form.name,\n                   bookId : form.bookId,\n                   genre : form.genre,\n                   author_id : form.author_id,\n                   photo : form.photo,\n                   description : form.description,\n                },\n                update: async (cache, { data : { updateBook } }) => {\n                    const data = cache.readQuery({\n                        query : QUERY_PAGE_BOOKS,\n                        variables : {\n                            page,\n                            limit,\n                            author,\n                            genre,\n                            key\n                        }\n                    });\n                    const index = data.booksPage.books.findIndex(book => book._id == form.bookId);\n                    data.booksPage.books[index] = {_id : form.bookId, ...updateBook };\n                    console.log(`${updateBook.name} was updated`);\n                    cache.writeQuery({\n                        query : QUERY_PAGE_BOOKS,\n                        variables : {\n                            limit,\n                            page,\n                            author,\n                            genre,\n                            key,\n                        },\n                        data : data,\n                    });\n                    return data;\n                }\n            });\n            return data;\n        } catch(err) {\n            console.log(err);\n        }\n    }\n}\n\nexport const deletedBook = async (bookId,page,limit) => {\n    try {\n        const { data } = await apolloClient.mutate({\n            mutation : DELETE_BOOK,\n            variables : {\n                bookId,\n            },\n            update : async (cache) => {\n                const data = cache.readQuery({\n                    query : QUERY_PAGE_BOOKS,\n                    variables : {\n                        limit,\n                        page,\n                    }\n                });\n                const index = data.booksPage.books.findIndex( book => book._id == bookId );\n                if( index == -1 ) return false;\n                data.booksPage.books.splice(index,1);\n                cache.writeQuery({\n                    query  : QUERY_PAGE_BOOKS,\n                    variables : {\n                        limit,\n                        page,\n                    },\n                    data,\n                });\n                for( let i = 0; i < 999; i++) {\n                    const { data : currentPage } = await apolloClient.query({\n                        query : QUERY_PAGE_BOOKS,\n                        variables : {\n                            limit,\n                            page : page + i\n                        }\n                    });\n\n                    const { data : {\n                        booksPage : {\n                            books : nextBooks,\n                            pageInfo : nextPageInfo\n                        }\n                    }} = await apolloClient.query({\n                        query : QUERY_PAGE_BOOKS,\n                        variables : {\n                            limit,\n                            page : page + i  + 1,\n                        }\n                    });\n                    if(nextBooks.length == 0) break;\n                    const [firstBook,...anotherBooks ] = nextBooks;\n                    currentPage.booksPage.books.push(firstBook);\n\n                    cache.writeQuery({\n                        query : QUERY_PAGE_BOOKS,\n                        variables : {\n                            limit,\n                            page : page + i\n                        },\n                        data : currentPage\n                    });\n                    \n                   await apolloClient.query({\n                        query : QUERY_PAGE_BOOKS,\n                        variables : {\n                            limit,\n                            page : page + i,\n                        }\n                    });\n                    \n \n                    cache.writeQuery({\n                        query : QUERY_PAGE_BOOKS,\n                        variables : {\n                            limit,\n                            page : page + i + 1,\n                        },\n                        data : {\n                            booksPage : {\n                                books : [...anotherBooks],\n                                pageInfo : nextPageInfo,\n                                __typename: \"BooksPaginate\"\n                            }\n                        }\n                    });\n\n                    const result = cache.readQuery({\n                        query : QUERY_PAGE_BOOKS,\n                        variables : {\n                            limit,\n                            page : page + i\n                        }\n                    });\n                    \n                    console.log(result);\n                }\n                return data;\n            }\n        });\n        return data;\n    }catch(err) {\n        console.log(err);\n    }\n}\n\n\nexport const getAuthorPage = async(limit,page,key) => {\n    const { data : {\n        authorsPage\n    }} = await apolloClient.query({\n        query : QUERY_PAGE_AUTHOR,\n        variables : {\n            limit,\n            page,\n            key\n        }\n    });\n    return authorsPage;\n}\n\nexport const getAuthor = async (id) => {\n    try {\n        const { data : { author }} = await apolloClient.query({\n            query : QUERY_AUTHOR,\n            variables  : {\n                id,\n            }\n        });\n        return author\n    } catch(err) {\n        console.log(err,'awdawd');\n    }\n}\n\n\nexport const getAllAuthor = async () => {\n    try {\n        const { data : { authors }} = await apolloClient.query({\n            query : QUERY_AUTHORS,\n        });\n        return authors;\n    } catch(err) {\n        console.log(err);\n    }\n}\n\nexport const addAuthor = async ({\n    name,\n    age\n}) => {\n    const limit = 4;\n    // const __typename = \"AuthorsPaginate\"\n    try {\n        const data = await apolloClient.mutate({\n            mutation : ADD_AUTHOR,\n            variables : {\n                name,\n                age : parseInt(age),\n            },\n            update : async (cache ,{ data : { addAuthor }} ) => {\n                if(!addAuthor) throw new Error('Something went wrong');\n                try  {\n                    const { data } = await apolloClient.query({\n                        query : QUERY_PAGE_AUTHOR,\n                        variables : {\n                            limit,\n                            page : 1\n                        },      \n                    });\n                    data.authorsPage.authors.unshift(addAuthor);\n                    cache.writeQuery({\n                        query : QUERY_PAGE_AUTHOR,\n                        variables : {\n                            limit,\n                            page : 1\n                        },\n                        data,\n                    });\n                    console.log('ok');\n                    if(data.authorsPage.authors.length <= 4 ) return;\n                    for(let i = 1; i < 999; i++) {\n                        // Query Current Page\n                        const {\n                            data : {\n                                authorsPage : {\n                                    authors : currentAuthors,\n                                    pageInfo : currentPage,\n                                }\n                            }\n                        } = await apolloClient.query({\n                            query : QUERY_PAGE_AUTHOR,\n                            variables : {\n                                limit,\n                                page : i,\n                            }\n                        });\n                        // Query nextPage\n                        const {\n                            data : {\n                                authorsPage : {\n                                    authors : nextAuthors,\n                                    pageInfo : nextPage,\n                                }\n                            }\n                        } = await apolloClient.query({\n                            query : QUERY_PAGE_AUTHOR,\n                            variables : {\n                                limit,\n                                page : i + 1\n                            }\n                        });\n                        if (currentAuthors.length === 1) break;\n                        const lastAuthor = currentAuthors.pop();\n                        nextAuthors.push(lastAuthor);\n                        cache.writeQuery({\n                            query : QUERY_PAGE_AUTHOR,\n                            variables : {\n                                limit,\n                                page : i,\n                            },\n                            data : {\n                                authorsPage : {\n                                    authors : currentAuthors,\n                                    pageInfo : currentPage,\n                                    __typename : \"AuthorsPaginate\"\n                                }\n                            }\n                        });\n\n                        cache.writeQuery({\n                            query : QUERY_PAGE_AUTHOR,\n                            variables : {\n                                limit,\n                                page : i + 1,\n                            },\n                            data : {\n                                authorsPage : {\n                                    authors : nextAuthors,\n                                    pageInfo : nextPage,\n                                    __typename : \"AuthorsPaginate\"\n                                },\n                            }\n                        });\n                    }\n                    return data;\n                } catch(err) {\n                    console.log(err)\n                }\n            }\n        });\n        return data;\n    } catch(err) {\n        const msg  = err.toString().split(\":\")[2];\n        return {\n            error : msg,\n        };\n    }\n}\n\nexport const updateAuthor = async ({\n        author_id,\n        name,\n        age\n    },limit,page\n) => {\n    try {\n        const data = await apolloClient.mutate({\n            mutation : UPDATE_AUTHOR,\n            variables : {\n                author_id,\n                name,\n                age : parseInt(age)\n            },\n            update : (cache,{ data : { updateAuthor }}) => {\n                if(!updateAuthor) return new Error('Something went wrong please try again');\n                cache.readQuery({\n                    query : QUERY_PAGE_AUTHOR,\n                    variables : {\n                        limit,\n                        page\n                    },\n                });\n            }\n        });\n        return data;\n    } catch(error) {\n        console.log(error,'ini error nyaaaa');\n        const msg = error.toString().split(\":\")[2];\n        return  { error : msg }\n    }\n}\n\nexport const deleteAuthor = async (author_id,limit,page) => {\n    try {\n        const data = await apolloClient.mutate({\n            mutation  : DELETE_AUTHOR,\n            variables : {\n                author_id,\n            },\n            update : async (cache, { data : deleteAuthor }) => {\n                try {\n                    const { error } = deleteAuthor;\n                    if( error ) new Error(\"Something wen't wrong \");\n                    const data = cache.readQuery({\n                        query : QUERY_PAGE_AUTHOR,\n                        variables : {\n                            limit,\n                            page,\n                        },\n                    });\n                    const delIndex = data.authorsPage.authors.findIndex( e => e._id == author_id );\n                    if( delIndex !== -1 ) data.authorsPage.authors.splice(delIndex,1);\n                    cache.writeQuery({\n                        query : QUERY_PAGE_AUTHOR,\n                        variables : {\n                            limit,\n                            page\n                        },\n                        data,\n                    });\n                    for(let i = 0; i < 999; i++ ) {\n                        // Query current page\n                        const { data : {\n                            authorsPage : {\n                                authors :  currentAuthors,\n                                pageInfo : currentPage\n                            }\n                        }}= await apolloClient.query({\n                            query : QUERY_PAGE_AUTHOR,\n                            variables : {\n                                limit,\n                                page : page + i,\n                            }\n                        });\n                        const {\n                            data : {\n                                authorsPage : {\n                                    authors : nextAuthors,\n                                    pageInfo : nextPage,\n                                }\n                            }\n                        } = await apolloClient.query({\n                            query : QUERY_PAGE_AUTHOR,\n                            variables : {\n                                limit,\n                                page : page  + i + 1.\n                            }\n                        });\n                        if(nextAuthors.length <= 0 ) break;\n                        const [firstAuthor,...anotherAuthors] = nextAuthors;\n                        currentAuthors.push(firstAuthor);\n                        cache.writeQuery({\n                            query : QUERY_PAGE_AUTHOR,\n                            variables : {\n                                limit,\n                                page : page + i\n                            },\n                            data : {\n                                authorsPage : {\n                                    authors : currentAuthors,\n                                    pageInfo : currentPage,\n                                    __typename : \"AuthorsPaginate\"\n                                },\n                            }\n                        });\n                        cache.writeQuery({\n                            query : QUERY_PAGE_AUTHOR,\n                            variables :  {\n                                limit,\n                            page : page + i + 1\n                            },\n                            data  : {\n                                authorsPage : {\n                                    authors : [...anotherAuthors],\n                                    pageInfo : nextPage,\n                                    __typename : 'AuthorsPaginate'\n                                }\n                            }\n                        });\n                    }   \n                } catch(err) {\n                    console.log(err);\n                }\n                return data;\n            }\n        });\n        return data\n    } catch(err) {\n        const msg = err.toString().split(\":\")[2];\n        return {\n            error : msg,\n        }\n    }\n}\n\nexport const verifyAdmin = async(password) => {\n    try {\n        const { data : {\n            verifyAdmin\n        }} = await apolloClient.query({\n            query : VERIFY_ADMIN,\n            variables : {\n                password,\n            }\n        });\n        return verifyAdmin;\n    } catch(err) {\n        console.log(err)\n    }\n}\n\n\nexport const verifyToken = async(token) => {\n    try {\n        const {\n            data : {\n                verifyUser\n            }\n        } = await apolloClient.query({\n            query : VERIFY_USER,\n            variables : {\n                token,\n            }\n        });\n        if(!verifyUser) throw new Error('Error When Verifying please try again later');\n        const {\n            email,\n            password\n        } = verifyUser;\n        store.dispatch('userAuth',{email,password});\n        return verifyUser;\n    } catch(err) {\n        const errSplit = err.toString().split(\":\");\n        if(errSplit.length > 1 )  {\n            const error = handleError(err);\n            throw new Error(error.message);\n        }\n        throw new Error(err);\n    }\n}\n\nexport const updateAdmin = async({\n    name,\n    email,\n    pwd,\n    avatar,\n    imgDefault,\n}) => { \n        if(!avatar || avatar == \"\" ) {\n            try {\n                const data = await apolloClient.mutate({\n                    mutation : UPDATE_ADMIN,\n                    variables : {\n                        username : name,\n                        email : email,\n                        password : pwd,\n                        imgDefault : imgDefault,\n                    },\n                    update : async ( cache, { data : { updateAdmin }} ) => {\n                        store.commit('SET_USER',updateAdmin);\n                    }, \n                });\n                return data;\n        } catch(err) {\n            const error = handleError(err);\n            return error;\n        }\n        } else  {\n            try {\n                const data = await apolloClient.mutate({\n                    mutation : UPDATE_ADMIN,\n                    variables : {\n                        username : name,\n                        email : email,\n                        password : pwd,\n                        imgDefault : imgDefault,\n                        avatar : avatar,\n                    },\n                    update : async (cache,{ data : { updateAdmin }}) => {\n                        store.commit('SET_USER',updateAdmin);\n                    },\n                });\n                return data;\n            } catch(err) {\n                const error = handleError(err);\n                return error;\n            }\n        }\n}\n\n\n\nexport const addGenre = async(name) => {\n    try {\n        const data = await apolloClient.mutate({\n            mutation : ADD_GENRE,\n            variables : {\n                name,\n            },\n            update : (cache,{ data : addGenre }) => {\n                const update = addGenre;\n                const data = cache.readQuery({\n                    query : QUERY_GENRES\n                });\n                data.genres.unshift(update.addGenre);\n                cache.readQuery({\n                    query : QUERY_GENRES,\n                    data,\n                });\n                return data;\n            }\n        });\n        return data;\n    } catch(err) {\n        console.log(err);\n    }\n}\n\n\nexport const deleteGenre = async(genreId) => {\n    try {\n        console.log('work');\n        const data = await apolloClient.mutate({\n            mutation : DELETE_GENRE,\n            variables : {\n                genreId,\n            },\n            update: (cache) => {\n                const data = cache.readQuery({\n                    query : QUERY_GENRES\n                });\n                const index = data.genres.findIndex( genre => genre._id == genreId );\n                if( index == -1 ) return;\n                data.genres.splice(index,1);\n                console.log(data,'awdwad');\n                cache.readQuery({\n                    query : QUERY_GENRES,\n                    data,\n                });\n                return data;\n            }\n        });\n        return data;\n    }catch(err) {\n        console.log(err);\n    }\n}"],"sourceRoot":""}